name: Build ‚Üí Push GHCR ‚Üí Deploy to VPS

on:
  push:
    branches: [ "main" ]          # despliega al hacer push a main
    tags: [ "v*.*.*" ]            # y/o al crear un tag tipo v1.2.3
  workflow_dispatch:

permissions:
  contents: read
  packages: write                 # necesario para subir a GHCR

env:
  REGISTRY: ghcr.io

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.img.outputs.name }}
      deploy_tag: ${{ steps.tag.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Calcula ghcr.io/<owner>/<repo> en min√∫sculas
      - name: Compute image name (lowercase)
        id: img
        run: |
          IMAGE="${{ env.REGISTRY }}/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"
          echo "name=$IMAGE" >> $GITHUB_OUTPUT

      # Decide el tag a desplegar:
      # - main  -> latest
      # - tag   -> nombre del tag (vX.Y.Z)
      # - otras -> sha-<commit corto>
      - name: Compute deploy tag
        id: tag
        shell: bash
        run: |
          if [[ "${{ github.ref_type }}" == "branch" && "${{ github.ref_name }}" == "main" ]]; then
            echo "value=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "value=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "value=sha-${GITHUB_SHA:0:12}" >> $GITHUB_OUTPUT
          fi

      # Metadatos/tags √∫tiles
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.img.outputs.name }}
          tags: |
            type=raw,value=${{ steps.tag.outputs.value }}
            type=ref,event=branch
            type=ref,event=tag
            type=sha
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # Descomenta si necesitas multi-arch:
          # platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_to_vps:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: ${{ needs.build_and_push.result == 'success' }}   # solo si el build/push fue exitoso
    steps:
      - name: Deploy over SSH (docker compose pull & up -d)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}   # clave privada SSH en texto (BEGIN OPENSSH PRIVATE KEY)
          port: ${{ secrets.SERVER_PORT }}
          script_stop: true
          script: |
            set -euo pipefail

            IMAGE_NAME="${{ needs.build_and_push.outputs.image_name }}"
            DEPLOY_TAG="${{ needs.build_and_push.outputs.deploy_tag }}"
            FULL_IMAGE="${IMAGE_NAME}:${DEPLOY_TAG}"

            echo "üîê Login GHCR en el VPS‚Ä¶"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            echo "‚¨áÔ∏è  Pull de la imagen ${FULL_IMAGE}‚Ä¶"
            docker pull "${FULL_IMAGE}"

            echo "üìÇ Ir a ${{ secrets.SERVER_PROJECT_PATH }}"
            cd "${{ secrets.SERVER_PROJECT_PATH }}"

            # Si hay compose, actualiza servicios; si no, solo informa
            if [ -f docker-compose.yml ] || [ -f compose.yml ]; then
              # Si tu compose usa image: ghcr.io/<owner>/<repo>:latest o ${IMAGE_TAG},
              # esto traer√° la nueva versi√≥n y recrear√° contenedores.
              docker compose pull
              docker compose up -d --remove-orphans
            else
              echo "‚ö†Ô∏è No se encontr√≥ docker-compose.yml/compose.yml. Solo se hizo pull de ${FULL_IMAGE}."
            fi

            echo "üßπ Limpieza de im√°genes antiguas‚Ä¶"
            docker image prune -f

            echo "‚úÖ Despliegue terminado."
