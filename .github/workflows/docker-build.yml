name: Build, Push and Deploy to Server

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permite ejecutar manualmente

env:
  IMAGE_NAME: arceliuz
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 🔄 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_DOCKERHUB }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 🚀 Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "🔄 Starting deployment process..."
            
            # Navegar al directorio del proyecto
            cd ${{ secrets.SERVER_PROJECT_PATH || '/home/ubuntu/arceliuz' }}
            
            # Hacer backup de la versión actual (opcional)
            echo "📦 Creating backup..."
            docker-compose down || true
            
            # Actualizar el código desde git (opcional)
            echo "📥 Pulling latest code..."
            git pull origin main || echo "⚠️ Git pull failed, continuing with Docker update..."
            
            # Login a los registros de Docker
            echo "🔐 Logging into Docker registries..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            
            # Actualizar las imágenes
            echo "📥 Pulling latest Docker images..."
            docker pull ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest || \
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            
            # Recrear y levantar los contenedores
            echo "🐳 Recreating containers..."
            docker-compose pull
            docker-compose up -d --force-recreate
            
            # Limpiar imágenes antiguas
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            
            # Verificar que todo esté funcionando
            echo "✅ Checking container status..."
            docker-compose ps
            
            # Mostrar logs recientes
            echo "📋 Recent logs:"
            docker-compose logs --tail=20
            
            echo "🎉 Deployment completed successfully!"

  notify:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📧 Notify deployment status
        if: always()
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🐳 Image: ${{ needs.build-and-push.outputs.image-tag }}"
            echo "🔍 Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
