name: Build ‚Üí Push GHCR ‚Üí Deploy to VPS

on:
  push:
    branches: [ "main" ]          # despliega al hacer push a main
    tags: [ "v*.*.*" ]            # y/o al crear un tag tipo v1.2.3
  workflow_dispatch:

permissions:
  contents: read
  packages: write                 # necesario para subir a GHCR

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.img.outputs.name }}
      deploy_tag: ${{ steps.tag.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Calcula ghcr.io/<owner>/<repo> en min√∫sculas
      - name: Compute image name (lowercase)
        id: img
        run: |
          IMAGE="${{ env.REGISTRY }}/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"
          echo "name=$IMAGE" >> $GITHUB_OUTPUT

      # Decide el tag a desplegar:
      # - main  -> latest
      # - tag   -> nombre del tag (vX.Y.Z)
      # - otras -> sha-<commit corto>
      - name: Compute deploy tag
        id: tag
        shell: bash
        run: |
          if [[ "${{ github.ref_type }}" == "branch" && "${{ github.ref_name }}" == "main" ]]; then
            echo "value=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "value=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "value=sha-${GITHUB_SHA:0:12}" >> $GITHUB_OUTPUT
          fi

      # Metadatos/tags √∫tiles
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.img.outputs.name }}
          tags: |
            type=raw,value=${{ steps.tag.outputs.value }}
            type=ref,event=branch
            type=ref,event=tag
            type=sha
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # Descomenta si necesitas multi-arch:
          # platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_to_vps:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: ${{ needs.build_and_push.result == 'success' }}   # solo si el build/push fue exitoso
    steps:
      - name: üöÄ Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üîÑ Starting deployment process..."
            
            # Navegar al directorio del proyecto
            cd ${{ secrets.SERVER_PROJECT_PATH || '/home' }}
            
            # Hacer backup de la versi√≥n actual (opcional)
            echo "üì¶ Creating backup..."
            docker-compose down || true
            
            # Actualizar el c√≥digo desde git (opcional)
            echo "üì• Pulling latest code..."
            git pull origin main || echo "‚ö†Ô∏è Git pull failed, continuing with Docker update..."
            
            # Login a los registros de Docker
            echo "üîê Logging into Docker registries..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            
            # Actualizar las im√°genes
            echo "üì• Pulling latest Docker images..."
            docker pull ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest || \
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            
            # Recrear y levantar los contenedores
            echo "üê≥ Recreating containers..."
            docker-compose pull
            docker-compose up -d --force-recreate
            
            # Limpiar im√°genes antiguas
            echo "üßπ Cleaning up old images..."
            docker image prune -f
            
            # Verificar que todo est√© funcionando
            echo "‚úÖ Checking container status..."
            docker-compose ps
            
            # Mostrar logs recientes
            echo "üìã Recent logs:"
            docker-compose logs --tail=20
            
            echo "üéâ Deployment completed successfully!"

  notify:
    needs: [build_and_push, deploy_to_vps]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üìß Notify deployment status
        if: always()
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üê≥ Image: ${{ needs.build-and-push.outputs.image-tag }}"
            echo "üîç Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
